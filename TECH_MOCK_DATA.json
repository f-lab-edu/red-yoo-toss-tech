[
  {
    "id": 1,
    "title": "똑똑하게 브라우저 Polyfill 관리하기",
    "summary": "현대적인 JavaScript를 쓰면서도 넓은 범위의 기기를 지원하기 위함 Polyfill을 어떻게 똑똑하게 설정할 수 있는지 소개합니다.",
    "date": "1637744308",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 2,
    "title": "토스증권 QA 문화 ‘통합테스트’를 아시나요? (feat. 해외주식)",
    "summary": "토스증권 해외주식 출시 전에 사내 임직원 대상으로 진행한 ‘통합테스트’에 대해 소개합니다. 통합테스트 진행 방식을 참고하여 간단한 규칙과 사용자 시나리오를 활용해 사용자의 반응을 미리 확인해 보세요.",
    "date": "1660439429",
    "author": "황채은",
    "job": "QA Manager",
    "content": "<p>안녕하세요. 토스증권 QA팀에서 일하고 있는 QA Manager 황채은입니다.</p>지난 글에서 잠깐 언급되었던 토스증권의 Closed Beta Test 기억하실까요? <code><span>🔗</span><a href='https://toss.tech/article/tosssec-qateam'>지난 포스팅 참고하기 링크</a></code></p><p>오늘은 해외 증권 서비스 출시를 위해 토스증권 임직원 대상으로 진행한 Closed Beta Test 에 대해 소개하려고 합니다.</p><p></p><h3>토스증권 서비스는 어떤 테스트 과정을 통해 출시되고 있을까요?</h3><p>토스증권에서는 기능별로 Silo가 만들어져있고, 그 Silo에는 PO, Developer, PD, DA, QA가 함께 서비스를 만들고 있는데요.</p><p>* PO(Product Owner), 개발자(Front/Server/Core), PD(Product Designer), DA(Data Analyst), QA(Quality Assurance)</p><p>개발이 완료된 서비스들은 1차로 개발자 단위 테스트를 진행 후 QA Manager는 알파 환경에서 계획한 테스트를 진행하고, 이슈 수정이 모두 완료되면 QA 환경에서 최종 확인된 기능에 대해 서비스 Release를 Silo 별로 진행하고 있습니다. 이런 과정은 일반적인 IT 회사의 QA Cycle과 비슷하게 진행하고 있어요.</p><p>하지만, 토스증권에서는 내부 임직원들 대상으로 테스트 참여를 유도하여 미처 발견하지 못한 Edge Case 들과 보다 다양한 사용자의 피드백을 미리 얻고자  Closed Beta Test를 진행하기도 한답니다. 실제 제가 작년에 진행했던 토스증권의 해외 주식 서비스 런칭 경험을 소개해 드리려고 해요.</p><p>토스증권에서 진행한 내부 임직원 테스트는 아래의 다양한 테스트 방식의 개념을 조금씩 섞어서 진행했어요.</p><p>QA라면 모두가 알고 있는 탐색적 테스팅의 개념, Dog Fooding, Bug Bash를 모두 활용하였는데요. 그전에 개념들을 한번 언급하고 지나갈게요!</p>"
  },
  {
    "id": 3,
    "title": "NestJS 환경에 맞는 Custom Decorator 만들기",
    "summary": "NestJS에서 데코레이터를 만들기 위해서는 NestJS의 DI와 메타 프로그래밍 환경 등을 고려해야 합니다. 어떻게 하면 이러한 NestJS 환경에 맞는 데코레이터를 만들 수 있을지 고민해보았습니다.",
    "date": "1657283063",
    "author": "송현지",
    "job": "Node.js Developer",
    "content": "<h1>들어가며</h1><p>데코레이터는 비즈니스와 상관 없는 로직들을 숨기면서 기능을 변경하거나 확장할 수 있게 합니다. 또한 여러 클래스에서 반복되는 공통 관심사가 있을 때 데코레이터를 사용하면 중복된 코드를 줄이고 코드를 모듈 단위로 관리하는 효과를 거둘 수 있습니다.</p><figure class='wp-block-image size-large'><div data-rmiz-wrap='visible'><img loading='lazy' width='1024' height='847' src='https://wp.toss.tech/wp-content/uploads/2022/11/tech-blog-1-1024x847.png' alt='' class='wp-image-1001' srcSet='https://toss.tech/wp-content/uploads/2022/11/tech-blog-1-1024x847.png 1024w, https://toss.tech/wp-content/uploads/2022/11/tech-blog-1-300x248.png 300w, https://toss.tech/wp-content/uploads/2022/11/tech-blog-1-768x635.png 768w, https://toss.tech/wp-content/uploads/2022/11/tech-blog-1-1536x1270.png 1536w, https://toss.tech/wp-content/uploads/2022/11/tech-blog-1-1568x1297.png 1568w, https://toss.tech/wp-content/uploads/2022/11/tech-blog-1.png 2000w' sizes='(max-width: 1024px) 100vw, 1024px' style='max-width:100%;max-height:100%'/><button aria-label='Zoom image' data-rmiz-btn-open='true'></button></div></figure><p>이런 이유로 저희 Node.js Chapter에서도 데코레이터를 적극 활용하고 있습니다. 하지만 NestJS에서는 데코레이터를 만들 때 다음과 같은 질문들이 있었습니다.<br/></p><ol><li>데코레이터에서 Provider를 사용해야할 때 어떻게 Provider에 접근할 수 있을까?</li><li>메타데이터를 쓰는 NestJS 데코레이터를 일반 데코레이터와 사용해도 괜찮을까?</li></ol><p><br/>NestJS에서 데코레이터를 만들기 위해서는 NestJS의 DI와 메타 프로그래밍 환경 등을 고려해야 합니다. 그래서 이 글을 통해 NestJS에서는 어떻게 데코레이터를 만드는지 살펴보고, 앞의 두 질문들을 고려하여 NestJS 환경에 맞는 데코레이터를 만들어보려고 합니다.<br/></p><p>들어가기 전에, 만약 데코레이터나 메타데이터가 생소하시다면 아래 문서들을 읽어보시는 걸 추천드립니다.</p><ul><li><a href='https://www.typescriptlang.org/ko/docs/handbook/decorators.html'>Typescript Decorator</a></li><li><a href='https://www.npmjs.com/package/reflect-metadata'>reflect-metadata</a></li></ul><p><br/></p><hr class='wp-block-separator'/><p><br/></p>"
  },
  {
    "id": 4,
    "title": "TypeScript 타입 시스템 뜯어보기: 타입 호환성",
    "summary": "타입호환성은 무엇이며 왜 필요할까요? 타입호환이 지원되지 않는 경우가 존재한다는 것을 아셨나요? 평소 익숙했던 개념들에 대해 질문을 던져가며 TypeScript 타입 시스템에 관해 심도있게 알아보고자 합니다. ",
    "date": "1645010970",
    "author": "김병우",
    "job": "Node.js Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 5,
    "title": "토스증권 QA Team을 소개합니다",
    "summary": "이 글은 토스증권 QA Team에 입사를 고려 중인 지원자들을 위해 작성된 글입니다. 토스증권 QA Manager 하는 역할과 일하는 방식은 어떻게 다를까요?",
    "date": "1670691878",
    "author": "박서진",
    "job": "QA Manager",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 6,
    "title": "CommonJS와 ESM에 모두 대응하는 라이브러리 개발하기: exports field",
    "summary": "Node.js에는 두 가지 Module System이 존재합니다. 토스 프론트엔드 챕터에서 운영하는 100개가 넘는 라이브러리들은 그것에 어떻게 대응하고 있을까요?",
    "date": "1643400667",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 7,
    "title": "테스트 의존성 관리로 높은 품질의 테스트 코드 유지하기",
    "summary": "혹시 테스트 코드에서도 의존성을 관리해본 적이 있으실까요? 해당 포스트에서는 Gradle의 java-test-fixtures 플러그인을 사용하여 테스트 의존성 관리를 통해 높은 품질의 테스트 코드를 유지하는 방법을 알아봅니다.",
    "date": "1659018252",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 8,
    "title": "에러 핸들링을 다른 클래스에게 위임하기 (Kotlin 100% 활용)",
    "summary": "Kotlin의 Result로 MSA에서 에러가 전파되지 않는 안전한 환경을 만드는 방법을 알아봅니다.",
    "date": "1649788061",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 9,
    "title": "Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기",
    "summary": "토스페이먼츠에서는 API docs를 REST Docs를 사용해서 작성할 수 있도록 권장하고 있습니다. 이 글에서는 DSL을 통해서 반복적인 REST Docs 테스트 코드 작성을 줄일 수 있는 방법을 알아봅니다.",
    "date": "1654643764",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 10,
    "title": "조금만 신경써서 초기 렌더링 빠르게 하기 (feat. JAM Stack)",
    "summary": "SPA(Single Page Application) 구조로 웹 프론트엔드 애플리케이션이 개발되면서 초기 렌더링 속도는 프런트엔드 개발자에게 중요한 과제 중 하나가 되었습니다. 사용자 경험에 영향을 줄 수 있는 가장 큰 요소 중 하나가 바로 속도이기 때문입니다.",
    "date": "1656237354",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 11,
    "title": "개발자의 애질리티",
    "summary": "이 글은 토스페이먼츠에 입사하신, 혹은 입사를 고려 중인 개발자분들을 위해 작성된 글입니다. 애자일하게 일한다는 것은 어떠한 의미일까요?",
    "date": "1671474852",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 12,
    "title": "Template Literal Types로 타입 안전하게 코딩하기",
    "summary": "TypeScript 코드베이스의 타입 안전성을 한 단계 올려줄 수 있는 Template Literal Type의 뜻과 응용에 대해 알아봅니다.",
    "date": "1640069258",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 13,
    "title": "node_modules로부터 우리를 구원해 줄 Yarn Berry",
    "summary": "토스 프론트엔드 레포지토리 대부분에서 사용하고 있는 패키지 매니저 Yarn Berry. 채택하게 된 배경과 사용하면서 좋았던 점을 공유합니다.",
    "date": "1639357720",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  },
  {
    "id": 14,
    "title": "JSCodeShift로 기술 부채 청산하기",
    "summary": "기술 부채는 개발할수록 쌓여만 갑니다. 프론트엔드 챕터가 JSCodeShift를 이용하여 순식간에 100개 서비스의 기술 부채를 해결한 경험을 소개합니다.",
    "date": "1671494936",
    "author": "박서진",
    "job": "Frontend Developer",
    "content": "<p>토스 앱은 넓은 범위의 기기를 지원하면서도 현대적인 JavaScript를 이용해서 개발되고 있습니다. 그렇지만 최신 JavaScript를 오래된 브라우저 위에서 실행하기 위해서는 “Polyfill” 문제를 해결해야 하는데요.</p> <p>이번 아티클에서는 Polyfill 문제가 무엇인지 알아보고, 토스에서 어떻게 똑똑하게 다루고 있는지 살펴보려고 합니다.</p> <h2>Polyfill이란?</h2> <p>오래된 버전의 브라우저에서는 현재 JavaScript가 당연하게 사용하고 있는 <code>Promise</code>나 <code>Set</code>객체가 없는 경우가 있습니다. 편리한 <a href='https://developer.mozilla.org/ko/docs/WebJavaScriptReference/Global_Objects/Array/at'>Array.prototype.at()</a>API는 Chrome 92 이상에서만 지원되기도 합니다.</p> <p>예를 들어서, 아래와 같은 코드는 최신 브라우저에서는 잘 동작하지만, 오래된 브라우저에서는 실패합니다. 객체나 메서드에 대한 구현이 없기 때문이죠.</p> "
  }
]
